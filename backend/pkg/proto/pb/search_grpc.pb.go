// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: search.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchClient is the client API for Search service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchClient interface {
	// Sends a greeting
	SetPRS(ctx context.Context, in *SetPRSRequest, opts ...grpc.CallOption) (*SetPRSReply, error)
	CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionReply, error)
	SetDateRange(ctx context.Context, in *SetDateRangeRequest, opts ...grpc.CallOption) (*SetDateRangeReply, error)
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error)
	Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error)
	SubmitByName(ctx context.Context, in *SubmitByNameRequest, opts ...grpc.CallOption) (*SubmitByNameReply, error)
}

type searchClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchClient(cc grpc.ClientConnInterface) SearchClient {
	return &searchClient{cc}
}

func (c *searchClient) SetPRS(ctx context.Context, in *SetPRSRequest, opts ...grpc.CallOption) (*SetPRSReply, error) {
	out := new(SetPRSReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/SetPRS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) CheckConnection(ctx context.Context, in *CheckConnectionRequest, opts ...grpc.CallOption) (*CheckConnectionReply, error) {
	out := new(CheckConnectionReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/CheckConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SetDateRange(ctx context.Context, in *SetDateRangeRequest, opts ...grpc.CallOption) (*SetDateRangeReply, error) {
	out := new(SetDateRangeReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/SetDateRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitReply, error) {
	out := new(SubmitReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) Save(ctx context.Context, in *SaveRequest, opts ...grpc.CallOption) (*SaveReply, error) {
	out := new(SaveReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchClient) SubmitByName(ctx context.Context, in *SubmitByNameRequest, opts ...grpc.CallOption) (*SubmitByNameReply, error) {
	out := new(SubmitByNameReply)
	err := c.cc.Invoke(ctx, "/rpc.Search/SubmitByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServer is the server API for Search service.
// All implementations must embed UnimplementedSearchServer
// for forward compatibility
type SearchServer interface {
	// Sends a greeting
	SetPRS(context.Context, *SetPRSRequest) (*SetPRSReply, error)
	CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionReply, error)
	SetDateRange(context.Context, *SetDateRangeRequest) (*SetDateRangeReply, error)
	Submit(context.Context, *SubmitRequest) (*SubmitReply, error)
	Save(context.Context, *SaveRequest) (*SaveReply, error)
	SubmitByName(context.Context, *SubmitByNameRequest) (*SubmitByNameReply, error)
	mustEmbedUnimplementedSearchServer()
}

// UnimplementedSearchServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServer struct {
}

func (UnimplementedSearchServer) SetPRS(context.Context, *SetPRSRequest) (*SetPRSReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPRS not implemented")
}
func (UnimplementedSearchServer) CheckConnection(context.Context, *CheckConnectionRequest) (*CheckConnectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckConnection not implemented")
}
func (UnimplementedSearchServer) SetDateRange(context.Context, *SetDateRangeRequest) (*SetDateRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDateRange not implemented")
}
func (UnimplementedSearchServer) Submit(context.Context, *SubmitRequest) (*SubmitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedSearchServer) Save(context.Context, *SaveRequest) (*SaveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedSearchServer) SubmitByName(context.Context, *SubmitByNameRequest) (*SubmitByNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitByName not implemented")
}
func (UnimplementedSearchServer) mustEmbedUnimplementedSearchServer() {}

// UnsafeSearchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServer will
// result in compilation errors.
type UnsafeSearchServer interface {
	mustEmbedUnimplementedSearchServer()
}

func RegisterSearchServer(s grpc.ServiceRegistrar, srv SearchServer) {
	s.RegisterService(&Search_ServiceDesc, srv)
}

func _Search_SetPRS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPRSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SetPRS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/SetPRS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SetPRS(ctx, req.(*SetPRSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).CheckConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/CheckConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).CheckConnection(ctx, req.(*CheckConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SetDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SetDateRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/SetDateRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SetDateRange(ctx, req.(*SetDateRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).Save(ctx, req.(*SaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Search_SubmitByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServer).SubmitByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Search/SubmitByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServer).SubmitByName(ctx, req.(*SubmitByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Search_ServiceDesc is the grpc.ServiceDesc for Search service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Search_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Search",
	HandlerType: (*SearchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPRS",
			Handler:    _Search_SetPRS_Handler,
		},
		{
			MethodName: "CheckConnection",
			Handler:    _Search_CheckConnection_Handler,
		},
		{
			MethodName: "SetDateRange",
			Handler:    _Search_SetDateRange_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _Search_Submit_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _Search_Save_Handler,
		},
		{
			MethodName: "SubmitByName",
			Handler:    _Search_SubmitByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search.proto",
}
